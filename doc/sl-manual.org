# -*- fill-column: 72; -*-
#+TITLE: SL Manual
#+AUTHOR: 8dcc
#+OPTIONS: toc:2
#+STARTUP: nofold
#+TEXINFO_DIR_CATEGORY: Software development

#+begin_comment emacs-lisp :results none
(defalias 'add-dedicated-target
   (kmacro "/ ^ - SPC <return> f : l l v E y A SPC < < <escape> p A > > <escape>")
   "Add an Org dedicated target to the next description list item.")
#+end_comment

#+TOC: headlines 2

Manual for [[https://github.com/8dcc/sl][8dcc/sl]].

* Copying
:PROPERTIES:
:COPYING: t
:END:

This manual is for SL (version 0.1), a simple Lisp interpreter.

Copyright \copy 2024 8dcc.

#+begin_quote
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.

A copy of the license should be included along with the manual. If not,
see https://www.gnu.org/licenses/.
#+end_quote

* Variables

These variables are defined by default in the global environment.

** Constants

These symbols are bound to a constant value, and can't be redefined.

- Variable: `nil' :: <<nil>>

  #+begin_comment text
  TODO: Org fails to export variables named "nil", so we need to add
  quotes until it's fixed.

  https://list.orgmode.org/878qvbstna.fsf@gmail.com/T/#u
  #+end_comment

  Represents the empty list, but is also used to denote the logical
  value /false/.

  #+begin_src lisp
  > nil
  nil

  > '()
  nil

  > ()  ; Special case, not treated as function call
  nil

  > (eval nil)
  nil

  > (cons 1 (cons 2 nil))
  (1 2)
  #+end_src

  This symbol is very special, since it represents the empty list =()=
  even when quoted. The following four expressions evaluate to the same
  value: The quoted symbol ='nil=, the symbol =nil=, the quoted empty list
  ='()=, and the empty list =()=.

  #+begin_src lisp
  > (type-of nil)
  List

  > (type-of 'nil)
  Symbol

  > (null? 'nil)
  tru

  > (equal? 'nil nil)
  tru
  #+end_src

  Note that this exception only applies to the symbol =nil=, it doesn't
  happen with other symbols bound to the empty list.

  #+begin_src lisp
  > (define var nil)
  nil

  > (type-of 'var)
  Symbol

  > (null? 'var)
  nil

  > (null? var)
  tru
  #+end_src

- Variable: `tru' :: <<tru>>

  Symbol that evaluates to itself, used for representing explicit truth
  in procedures returning predicates (see [[*Logical primitives][Logical primitives]]). There is
  no need for this symbol, since any non-nil expression represents
  truth, but it's convenient.

  #+begin_src lisp
  > tru
  tru

  > (eval tru)
  tru
  #+end_src

** Debugging variables

These variables are used by the interpreter itself for debugging
purposes.

- Variable: `*debug-trace*' :: <<*debug-trace*>>

  List of expressions that are traced when called. It's not advised to
  change the value of =*debug-trace*= directly with =define=, but instead
  use the standard library function =trace= (see [[trace][=trace=]]).

  #+begin_src lisp
  > (defun fact (n)
      (if (= n 0)
          1
          (* n (fact (- n 1)))))
  <lambda>

  > (define *debug-trace* (list fact))
  (<lambda>)

  > (fact 3)
    0: (fact 3)
      1: (fact 2)
        2: (fact 1)
          3: (fact 0)
          3: 1
        2: 1
      1: 2
    0: 6
  6
  #+end_src

  In the previous example, notice how the function itself is added to
  the list, not the symbol =fact=. This allows debugging anonymous
  functions and macros, as long as they match with the =equal?= primitive
  (see [[equal?][=equal?=]]).

  #+begin_src lisp
  > (defun identity (e) e)
  <lambda>

  > (equal? identity
            (lambda (e) e))

  > (trace (lambda (e) e))
  "Trace enabled."

  > (identity 5)
    0: (identity 5)
    0: 5
  5
  #+end_src

* Primitive Procedures

This section explains the different primitive procedures in
SL. Primitive procedures are implemented in C.

** Special Forms

These primitives are /special forms/, that is, special procedures whose
arguments are /not/ evaluated before the call. This way the procedures can
operate on the un-evaluated expressions, before evaluating them manually
if needed. The C primitives for this section are defined in
[[file:prim_special.c]].

A list is interpreted as a special form call when its first element is a
special form symbol. The list of special form symbols is defined in
[[file:eval.c]], so they are hard-coded into the interpreter.

#+begin_src lisp
(define special-form-symbols
    (list ...))

(defun is-special-form (e)
  ;; Non-empty list whose first element is a special symbol.
  (and (list? e)
       (not (null? e))
       (symbol? (car e))
       (member? (car e) special-form-symbol)))
#+end_src

However, since the actual functions corresponding to the special form
symbols are retrieved normally from the current environment, it is
/technically/ possible to overwrite the symbols with new functions
(e.g. using =define=), but it's highly discouraged.

For more information on special forms, see Section 4.1.1 of /Structure
and Interpretation of Computer Programs/[fn::
[[https://web.mit.edu/6.001/6.037/sicp.pdf#subsection.4.1.1]]].

- Special Form: quote expr :: <<quote>>

  Return the argument, effectively delaying its evaluation.

  #+begin_src lisp
  > (quote x)
  x

  > 'x
  x

  > (quote (+ 1 2))
  (+ 1 2)
  #+end_src

  Note that ='expr= is just syntactic sugar for =(quote expr)=. This is
  handled in [[file:parser.c]].

- Special Form: backquote expr :: <<backquote>>

  Return the argument, while allowing selective evaluation. Without
  using special /unquote/ arguments, described below, it's behavior is
  identical to =quote=. Note that multiple symbols are bound to the C
  primitive in the global environment: =backquote= and =`=[fn::That is, the
  /grave accent/ character (ASCII code 96).].

  As mentioned, the backquote is pretty special because it lets the user
  evaluate parts of the argument expression. There are two symbols that
  can be used as a procedure call for specifying which parts should be
  evaluated. The =,= symbol[fn::That is, the /comma/ character (ASCII code
  44).] is used for /unquoting/ and the =,@= symbol[fn::That is, the /comma/
  character (ASCII code 44) followed by the /at sign/ (ASCII code 64).] is
  used for /splicing/.

  If an expression is /unquoted/ (e.g ~,expr~ or ~(, expr)~), it will be
  evaluated by =backquote=. If an expression is /spliced/ (e.g ~,@expr~ or ~(,@
  expr)~), it will be evaluated just like when /unquoting/, but instead of
  returning the list itself, the /contents/ of the resulting list will be
  appended to an outer list. Therefore, you can only /splice/ an
  expression if it evaluates to a list, and if the /splice/ call was made
  within another list.

  The =,= and =,@= symbols are bound in the global environment to note that
  they are reserved, but they cannot be used outside of a =backquote=
  argument.

  Again, just like with =quote=, note that ~`expr~ is just syntactic sugar
  for ~(` expr)~, and ~,expr~ is syntactic sugar for ~(, expr)~. They are all
  handled in [[file:parser.c]].

  #+begin_src lisp
  > `sym
  sym

  ;; For showing how the parser expands them.
  > (quote `(a ,b c d))
  (` (a (, b) c d))

  > (define var 123)
  123

  > `(a ,var b c)
  (a 123 b c)

  > `(a (b ,var) c ,var)
  (a (b 123) c 123)

  > (define my-lst '(1 2 3))
  (1 2 3)

  > `(a b ,@my-lst c d)
  (a b 1 2 3 c d)

  > `(a b ,@(list 'X 'Y 'Z) c)
  (a b X Y Z c)
  #+end_src

  Also note that none of this /unquote/ functionality is available inside
  =quote= arguments, just =backquote=.

  #+begin_src lisp
  > '(,a b (c ,d) e)
  ((, a) b (c (, d)) e)

  > (define var 123)
  123

  > (define my-backquote-call '`,var)
  (` (, var))

  > (eval my-backquote-call)
  123
  #+end_src

- Special Form: define symbol expr :: <<define>>

  Bind symbol to a value in the current environment.

  Evaluates the second argument, and binds it to the first one. Returns
  the evaluated expression.

  #+begin_src lisp
  > n
  Unbound symbol: `n'.

  > (define n 123)
  123

  > n
  123
  #+end_src

  As mentioned, it only operates on the /current/ environment.

  #+begin_src lisp
  > (define n 123)
  123

  > (define f
      (lambda ()
        (define n 999)
        (list "Finished:" n)))
  <lambda>

  > (f)
  ("Finished:" 999)

  > n
  123
  #+end_src

  It is a special form because the first argument is not evaluated. This
  way, it doesn't have to be quoted by the caller.

- Special Form: define-global symbol expr :: <<define-global>>

  Bind symbol to a value in the top-most environment. For more
  information, see [[define][=define=]].

  #+begin_src lisp
  > (define n 123)
  123

  > (define f
      (lambda ()
        (define-global n 999)
        (list "Finished:" n)))
  <lambda>

  > (f)
  ("Finished:" 999)

  > n
  999
  #+end_src

- Special Form: lambda formals body... :: <<lambda>>

  Return a new anonymous procedure.

  The =lambda= primitive expects a list of formal arguments (which must be
  symbols) and one or more expressions (of any type) for the body.

  Expressions of type /Lambda/ evaluate to themselves. When calling a
  lambda, each argument is evaluated and bound to its formal symbol, and
  each expression in the body of the function is evaluated in order,
  returning the last one.

  #+begin_src lisp
  > (lambda (x)
      (* x 3))
  <lambda>

  > ((lambda (x) (* x 3)) 5)
  15

  > (define f
      (lambda (x)
        (+ x 5)))
  <lambda>

  > (f 3)
  8
  #+end_src

  A keyword symbol =&rest= followed by a single symbol /S/, can be used in
  the formal argument list to indicate that the caller can provide extra
  non-mandatory arguments, and they will be stored in a *list* bound to
  the symbol /S/ when making the call. If no extra arguments are provided
  when making the call, /S/ is bound to the empty list =nil=.

  #+begin_src lisp
  > (define f
      (lambda (a b &rest other)
        (list a b other)))
  <lambda>

  > (f 1 2 3 4 5)
  (1 2 (3 4 5))
  #+end_src

- Special Form: macro formals body... :: <<macro>>

  Return a new anonymous macro.

  The =macro= primitive expects a list of formal arguments (which must be
  symbols) and one or more expressions (of any type) for the body.

  Expressions of type /Macro/ evaluate to themselves. Macros are generally
  similar to lambdas, but there are some key differences:

  - When a macro is called, the arguments are *not* evaluated before
    applying it, so the macro can operate on the un-evaluated
    expressions directly, instead of on the values they compute. The
    first step of a macro call is binding the un-evaluated arguments to
    the formals.
  - Macros don't /directly/ compute values, they instead build Lisp
    expressions that will be used to compute the actual values. The
    second step of a macro call is the /macro expansion/ (see
    [[macroexpand][=macroexpand=]]). In this step, the macro is called just like a
    lambda, returning a Lisp expression.
  - The last step of a macro call is evaluating the expanded expression,
    which will be used to compute the actual value returned by the
    macro.

  In other words the general process when calling a lambda is:

  #+begin_example
  Evaluate arguments -> Bind arguments -> Evaluate body
                        `-----------------------------´
                                   (Apply)
  #+end_example

  While the call process of a macro is:

  #+begin_example
  Bind arguments -> Evaluate body -> Evaluate expansion
  `-----------------------------´
              (Expand)
  #+end_example

  While the process of calling a macro is:

  #+begin_src lisp
  > (macro (name) (list 'define name 123))
  <macro>

  > (define my-macro
      (macro (name) (list 'define name 123)))
  <macro>

  > (my-macro some-name)
  123

  > (macroexpand '(my-macro some-name))
  (define some-name 123)

  > some-name
  123
  #+end_src

  In the previous example, notice how we don't have to quote =some-name=
  when calling =my-macro=. This is because, since macro arguments are not
  evaluated, the /symbol/ =some-name= is passed to the macro, not the value
  bound to it. The macro is expanded to the list =(define some-name 123)=,
  and then it's evaluated.

  The special form =backquote= can be really useful in macros. See
  [[backquote][=backquote=]].

  #+begin_src lisp
  ;; Without using backquote
  (defmacro my-macro (x y)
    (list 'if x
          (list 'func (list 'quote 'abc))
          (list '+ '1 '2 y)))

  ;; Using backquote
  (defmacro my-macro (x y)
    `(if ,x
         (func 'abc)
         (+ 1 2 ,y)))
  #+end_src

  Just like lambdas, macros support the use of the =&rest= keyword in the
  formal argument list.

  For more information on how macros behave in this Lisp, see the
  [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Macros.html][Emacs Lisp manual]].

- Special Form: begin &rest exprs :: <<begin>>

  Evaluate each argument in order, and return the last result.

  This primitive is a special form for various reasons. When making a
  normal procedure call, the arguments are not required to be evaluated
  in order, when calling =begin=, they are. The fact that it has to
  evaluate the expressions is helpful when combined with something like
  =apply= and a quoted expression (see [[apply][=apply=]]).

  #+begin_src lisp
  ;; Arguments not evaluated because it's a special form.
  > (begin
     (define n 123)
     (+ 1 2))
  3

  > n
  123

  ;; Arguments not evaluated because the list is quoted.
  > (apply begin
           '((define n 456)
             (+ 1 2)))
  3

  > n
  456
  #+end_src

  Furthermore, it could be defined as a macro using =lambda=, with some
  limitations. For example, in the following macro version, calls to
  =define= would bind the variables in the =lambda= environment, which does
  not happen in the special form version.

  #+begin_src lisp
  > (defmacro my-begin (&rest exprs)
      (list (cons* 'lambda '() exprs)))
  <macro>

  > (my-begin
     (define my-var 123) ; Only defined in body
     'ignored-sym
     (+ 1 2 3))
  6

  > my-var
  Unbound symbol: `my-var'.
  #+end_src

- Special Form: if predicate consequent alternative :: <<if>>

  Return evaluated /consequent/ or /alternative/ depending on whether or not
  /predicate/ evaluated to non-nil or not, respectively. See also [[nil][=nil=]]
  and [[tru][=tru=]].

  #+begin_src lisp
  > (if tru 'abc 'xyz)
  abc

  > (if nil 'abc 'xyz)
  xyz

  > (if (> 5 3)
        (+ 10 20)
        (- 60 50))
  30
  #+end_src

  Note that the /predicate/ is always evaluated, but only the /consequent/
  or the /alternative/ is evaluated afterwards. This is a good example on
  why special forms are necessary, since a normal function call would
  have to evaluate the 3 arguments before applying =if= to them.

- Special Form: or &rest exprs :: <<or>>

  Evaluates each argument expression in order, and once it finds a
  non-nil result, it stops evaluating and returns it. Returns =nil= if all
  of them evaluated to =nil=, or when called with no arguments.

  #+begin_src lisp
  > (or (> 1 2) (> 3 4) (> 5 6))
  nil

  > (or (> 1 2) (> 3 4) 'hello)
  hello

  > (or)
  nil
  #+end_src

  Note that this primitive does not need to be a special form, since it
  can be built with a macro and =if=.

  #+begin_src lisp
  (defmacro my-or (&rest exprs)
    (if (null? exprs)
        nil
        ;; TODO: Don't overwrite "result", generate unique symbol.
        (list (list 'lambda (list 'result)
                    (list 'if
                          'result
                          'result
                          (cons 'my-or (cdr exprs))))
              (car exprs))))
  #+end_src

- Special Form: and &rest exprs :: <<and>>

  Evaluates each argument expression in order, and if it finds a =nil=
  result, it stops evaluating and returns =nil=. If all arguments
  evaluated to non-nil, returns the last result. Returns =tru= when called
  with no arguments.

  #+begin_src lisp
  > (and (> 1 2) (> 3 4) (> 5 6))
  nil

  > (and (> 4 3) (> 2 1) 'hello)
  hello

  > (and)
  tru
  #+end_src

  Just like with =or=, this primitive does not need to be a special form:

  #+begin_src lisp
  (defmacro my-and (&rest exprs)
    (if (null? exprs)
        tru
        ;; TODO: Don't overwrite "result", generate unique symbol.
        (list (list 'lambda (list 'result)
                    (list 'if
                          'result
                          (if (null? (cdr exprs))
                              'result
                              (cons 'my-and (cdr exprs)))
                          nil))
              (car exprs))))
  #+end_src

** General Primitives

These primitives don't fit into other categories. They are defined in
[[file:prim_general.c]].

- Function: eval expr :: <<eval>>

  Evaluate the specified expression.

  Different expression types have different evaluation rules:

  1. The empty list (=nil=) evaluates to itself.
  2. Non-empty lists are evaluated as procedure calls.
     - If the (un-evaluated) =car= of the list is a special form symbol
       (see [[*Special Forms]]), it passes the un-evaluated =cdr= to the
       corresponding special form primitive.
     - If the (evaluated) =car= of the list is a macro, the macro is
       called with the un-evaluated =cdr= of the list.
     - Otherwise, the arguments are evaluated and the procedure is
       called. If one argument fails to evaluate, evaluation stops.
  3. Symbols evaluate to their bound values in the current
     environment[fn::See also Section 3.2 of SICP.].
  4. Other expression types (numbers, strings, functions, etc.)
     evaluate to themselves.

  Keep in mind that, since =eval= is a normal procedure, its arguments
  will be evaluated before the actual function call is made, so the user
  might need to use the =quote= special form.

  #+begin_src lisp
  (define var 123)

  ;; We are evaluating 123, which evaluates to itself.
  (eval var)

  ;; We are evaluating the symbol "var", which evaluates to 123.
  (eval (quote var))
  #+end_src

  The C /primitive/ is called =prim_eval=, but the actual evaluation process
  is performed by the C function =eval=, defined in [[file:eval.c]].

- Function: apply function arg-list :: <<apply>>

  Apply a function to a list of arguments.

  The first argument must be an /applicable/ expression, that is, a
  /Primitive/, /Lambda/ or /Macro/; and the second argument must be a list.

  Again, =apply= is a normal procedure, so its arguments will be evaluated
  before the call. However, even thought the user might need to quote
  the argument list, the first argument must be a /procedure/, not a
  /symbol/.

  #+begin_src lisp
  > (apply '+ '(1 2 3))
  Error: Expected a procedure as the first argument, got 'Symbol'.

  > (apply + '(1 2 3))
  6
  #+end_src

  Just like with =eval=, the C /primitive/ is called =prim_apply=, but it's
  just a wrapper for the C function =apply=, defined in [[file:eval.c]]. It
  checks the type of the =function= expression, and dispatches the call to
  the appropriate function for performing the actual application
  process. For more information, see [[lambda][=lambda=]] and [[macro][=macro=]].

- Function: macroexpand quoted-expr :: <<macroexpand>>

  Expand =quoted-expr=, a list representing a macro call. The evaluated
  =car= of the list must be an expression of type /Macro/. The expansion of
  a macro is the expression returned by that macro before being
  evaluated. The /expansion/ step of a macro call is the same as a normal
  lambda call, but the arguments are not evaluated before calling
  it.

  #+begin_src lisp
  > (defmacro inc (sym)
      (list 'define sym (list '+ sym 1)))
  <macro>

  > (define my-var 5)
  5

  > (macroexpand '(inc my-var))
  (define my-var (+ my-var 1))
  #+end_src

  Notice how the macro body just returns a list. That is the macro
  expansion. Calling a macro simply means evaluating the expanded
  expression. See also [[macro][=macro=]].

- Function: random limit :: <<random>>

  Return a random number between zero and =limit=. The argument type must
  be numerical, and the returned number will share the same type.

  #+begin_src lisp
  > (random 5)
  4

  > (random 5.0)
  2.261398

  > (type-of (random 1))
  Integer

  > (type-of (random 1.0))
  Float
  #+end_src

- Function: set-random-seed seed :: <<set-random-seed>>

  Set the random seed to the specified integer argument. Returns =tru=.

  #+begin_src lisp
  > (set-random-seed 1337)
  tru

  > (random 1000)
  136

  > (set-random-seed 1337)
  tru

  > (random 1000)
  136
  #+end_src

** Logical primitives

These primitives are used to check for logical truth. They usually
return a /predicate/, that is, an expression whose value is meant to be
interpreted as either /true/ or /false/. In SL, the empty list =nil= is used
to denote /false/, and other values denote /true/ implicitly (see
[[nil][=nil=]]). Usually, these functions return either =nil= or the explicit truth
symbol =tru=.

- Function: equal? a b &rest rest :: <<equal?>>

  Return =tru= if the structure of /all/ arguments is equal, =nil=
  otherwise. In other words, if they are isomorphic. As a rule of thumb,
  two expressions are isomorphic if =write-to-string= returns the same
  string for both of them (see [[write-to-string][=write-to-string=]]). Isomorphism for
  different types will be expanded below.

  The primitive doesn't /require/ arguments of the same type, but the
  equality will usually fail if they don't share a common one.

  Important exceptions:

  - The /symbol/ =nil= and the empty /list/ =()= are interchangeable, and
    therefore equal. This is an exception, and is explained in more
    detail in [[nil][=nil=]].

  Equality for different types:

  - Two non-empty lists are equal if they have the same number of
    elements, and if each expression in the first list is equal to the
    corresponding expression in the second list, according to this
    function =equal?=.
  - Two numbers are equal according to this function if they share the
    same type, and if they have the same value. General numerical
    equality can be checked with [[=][===]].
  - Two strings are equal if they have the same length, and if all of
    their characters match.
  - Symbols are handled just like strings, but comparing the two types
    will always returns =nil=.
  - Two expressions of type /Primitive/ are equal if they point to the
    same C function in memory.
  - Two lambda functions are equal if they have the same number of
    formals, their formals have the same names, and all of the
    expressions in their body match according to this function =equal?=.
  - Macros are handled just like lambdas, but, just like symbols and
    strings, they are not equal according to this function because they
    don't share the same expression type.

  Some examples:

  #+begin_src lisp
  > (equal? 123 123)
  tru

  > (equal? 5 5.0)
  nil

  > (equal? 'abc "abc")
  nil

  > (defun foo (x) x)
  <lambda>

  > (equal? foo (lambda (x) x))
  tru

  > (equal? foo (lambda (y) y))
  nil

  > (defmacro bar (x) x)
  <macro>

  > (equal? foo bar)
  nil
  #+end_src

- Function: = a b &rest rest :: <<=>>

  Returns =tru= if the value of /all/ numerical arguments is equal, =nil=
  otherwise. The value of two numerical expressions is equal, according
  to this function, if their values are the same after being converted
  to a common type.

  Specifically, this is how the types are converted:

  - If both have the same type, no conversion is made.
  - If one is a /Float/ and the other is an /Integer/, the integer is
    converted into a /Float/, independently of the type order.

  Some examples:

  #+begin_src emacs-lisp
  > (= 1 1)
  tru

  > (= 1 1.0)
  tru

  > (= 1 1.0 2)
  nil
  #+end_src

- Function: < a b &rest rest :: <<lt>>

  Return =tru= if all arguments are monotonically increasing, that is,
  $a<b<...<n$; =nil= otherwise. Predicates are therefore transitive, that
  is, $a<c$.

  Just like with equality, two expressions will increase or decrease
  depending on their type. These are the different conditions required
  for two expressions to be increasing or decreasing:

  - Two numbers are increasing or decreasing if the value of second is
    greater or smaller than the value of the first,
    respectively. Numbers can be compared if they don't share the same
    type, but will be converted to a common one, just like with [[=][===]].
  - Two strings are increasing or decreasing if the first differing
    character in the strings is greater or smaller on the second string
    than on the first[fn::This is checked using the C function =strcmp=.],
    respectively.
  - Symbols are handled just like strings, but comparing the two types
    will always returns =nil=.
  - Other expression types can't be compared using this function.

  Some examples:

  #+begin_src lisp
  (< 1 2)      ; tru
  (< 10 20 30) ; tru
  (< 10 20 5)  ; nil
  #+end_src

- Function: > a b &rest rest :: <<gt>>

  Return =tru= if all arguments are monotonically decreasing, that is,
  $a>b>...>n$; =nil= otherwise. Predicates are therefore transitive, that
  is, $a>c$. For more information on this function, see [[lt][=<=]].

  Some examples:

  #+begin_src lisp
  (> 2 1)      ; tru
  (> 30 20 10) ; tru
  (> 30 20 40) ; nil
  #+end_src

** String primitives

TODO

- Function: write-to-string expr :: <<write-to-string>>

  TODO

* Standard library

TODO

** Debugging

TODO

- Function: trace function :: <<trace>>

  TODO
