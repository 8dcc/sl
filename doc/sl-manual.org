# -*- fill-column: 72; -*-
#+TITLE: SL Manual
#+AUTHOR: 8dcc
#+OPTIONS: toc:2
#+STARTUP: nofold
#+TEXINFO_DIR_CATEGORY: Software development
#+TEXINFO_DIR_NAME: SL
#+TEXINFO_DIR_DESC: Simple Lisp

#+TOC: headlines 2

* COMMENT Meta
** Document manipulation

For adding Org dedicated targets to description list items.

#+begin_src emacs-lisp :results none
(query-replace-regexp (rx line-start
                          (group-n 1 (seq "- Function:"
                                          (one-or-more space)))
                          (group-n 2 (one-or-more graph))
                          (group-n 3 (seq (one-or-more space)
                                          (zero-or-more not-newline)
                                          "::"))
                          line-end)
                      "\\1\\2\\3 <<\\2>>")
#+end_src

** General todo list

- We should avoid using =⇒= and =→= directly, it would be good if we could
  use Texinfo's =@result{}=. See [[https://www.gnu.org/savannah-checkouts/gnu/texinfo/manual/texinfo/html_node/_0040result.html][Texinfo manual]].

* Copying
:PROPERTIES:
:COPYING: t
:END:

This manual is for SL (version 0.1), a Simple Lisp interpreter.

Copyright \copy 2024 8dcc.

#+begin_quote
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.

A copy of the license should be included along with the manual. If not,
see https://www.gnu.org/licenses/.
#+end_quote

* General concepts

This section will explain some important concepts about the Lisp syntax,
and about the interpreter itself.

** Types

All expressions have a single type that determines the kind of value it
is currently storing. Types are usually capitalized and, in the manual,
slanted.

See also [[*Type-checking primitives][Type-checking primitives]] and [[*Type conversion primitives][Type conversion primitives]].

*** Generic Number Type

Some functions accept multiple numeric types, so in order to operate on
them, they need to be internally converted to a /Generic Number
Type/. Depending on the types and the values being converted, some
information might be lost in the process (e.g. when converting really
big integers).

Currently, the generic number type is /Float/, that is, a C =double=. For
example, most arithmetic function accept arguments of any numeric type,
so if the list of arguments is not homogeneous, they are converted, and
a Generic Number Type is returned.

#+begin_src lisp
(+ 5 2.0)
  ⇒ 7.0
#+end_src

The C functions for handling Generic Number Types are defined as =inline=
in the [[file:expr.h]] header.

* Variables

These variables are defined by default in the global environment.

** Constants

These symbols are bound to a constant value, and can't be redefined.

- Variable: `nil' :: <<nil>>

  #+begin_comment org
  TODO: Org fails to export variables named "nil", so we need to add
  quotes until it's fixed.

  https://list.orgmode.org/878qvbstna.fsf@gmail.com/T/#u
  #+end_comment

  Represents the empty list, but is also used to denote the logical
  value /false/.

  #+begin_src lisp
  nil
    ⇒ nil

  '()
    ⇒ nil

  ()  ; Special case, not treated as function call
    ⇒ nil

  (eval nil)
    ⇒ nil

  (cons 1 (cons 2 nil))
    ⇒ (1 2)
  #+end_src

  This symbol is very special, since it represents the empty list =()=
  even when quoted. The following four expressions evaluate to the same
  value: The quoted symbol ='nil=, the symbol =nil=, the quoted empty list
  ='()=, and the empty list =()=.

  #+begin_src lisp
  (type-of nil)
    ⇒ List

  (type-of 'nil)
    ⇒ Symbol

  (null? 'nil)
    ⇒ tru

  (equal? 'nil nil)
    ⇒ tru
  #+end_src

  Note that this exception only applies to the symbol =nil=, it doesn't
  happen with other symbols bound to the empty list.

  #+begin_src lisp
  (define var nil)
    ⇒ nil

  (type-of 'var)
    ⇒ Symbol

  (null? 'var)
    ⇒ nil

  (null? var)
    ⇒ tru
  #+end_src

- Variable: `tru' :: <<tru>>

  Symbol that evaluates to itself, used for representing explicit truth
  in procedures returning predicates (see [[*Logical primitives][Logical primitives]]). There is
  no need for this symbol, since any non-nil expression represents
  truth, but it's convenient.

  #+begin_src lisp
  tru
    ⇒ tru

  (eval tru)
    ⇒ tru
  #+end_src

** Debugging variables

These variables are used by the interpreter itself for debugging
purposes.

- Variable: `*debug-trace*' :: <<*debug-trace*>>

  List of expressions that are traced when called. It's not advised to
  change the value of =*debug-trace*= directly with =define=, but instead
  use the standard library function =trace= (see [[trace][=trace=]]).

  #+begin_src lisp
  (defun fact (n)
    (if (= n 0)
        1
        (* n (fact (- n 1)))))

  (define *debug-trace* (list fact))

  (fact 3)
    0: (fact 3)
      1: (fact 2)
        2: (fact 1)
          3: (fact 0)
          3: 1
        2: 1
      1: 2
    0: 6
    ⇒ 6
  #+end_src

  In the previous example, notice how the function itself is added to
  the list, not the symbol =fact=. This allows debugging anonymous
  functions and macros, as long as they match with the =equal?= primitive
  (see [[equal?][=equal?=]]).

  #+begin_src lisp
  (defun identity (e) e)
    ⇒ <lambda>

  > (equal? identity
            (lambda (e) e))
    ⇒ tru

  (trace (lambda (e) e))
    ⇒ "Trace enabled."

  (identity 5)
    0: (identity 5)
    0: 5
    ⇒ 5
  #+end_src

* Primitive Procedures

This section explains the different primitive procedures in
SL. Primitive procedures are implemented in C.

** Special Forms

These primitives are /special forms/, that is, special procedures whose
arguments are /not/ evaluated before the call. This way the procedures can
operate on the un-evaluated expressions, before evaluating them manually
if needed. The C primitives for this section are defined in
[[file:prim_special.c]].

A list is interpreted as a special form call when its first element is a
special form symbol. Special form symbols are specified by an
environment flag that can't be currently set by the user. Special form
symbols are also constant, so they can't be redefined.

#+begin_src lisp
(defun special-form-symbol? (sym)
  ;; TODO: Check the symbol's flags in the environment.
  ...)

(defun special-form? (e)
  ;; Non-empty list whose first element is a special symbol.
  (and (list? e)
       (not (null? e))
       (symbol? (car e))
       (special-form-symbol? (car e))))
#+end_src

For more information on special forms, see Section 4.1.1 of /Structure
and Interpretation of Computer Programs/[fn::
[[https://web.mit.edu/6.001/6.037/sicp.pdf#subsection.4.1.1]]].

- Special Form: quote expr :: <<quote>>

  Return the argument, effectively delaying its evaluation.

  #+begin_src lisp
  (quote x)
    ⇒ x

  'x
    ⇒ x

  (quote (+ 1 2))
    ⇒ (+ 1 2)
  #+end_src

  Note that ~'expr~ is just syntactic sugar for ~(quote expr)~. This is
  handled in [[file:parser.c]].

- Special Form: backquote expr :: <<backquote>>

  Return the argument, while allowing selective evaluation. Without
  using special /unquote/ arguments, described below, it's behavior is
  identical to =quote=. Note that multiple symbols are bound to the C
  primitive in the global environment: =backquote= and =`=[fn::That is, the
  /grave accent/ character (ASCII code 96).].

  As mentioned, the backquote is pretty special because it lets the user
  evaluate parts of the argument expression. There are two symbols that
  can be used as a procedure call for specifying which parts should be
  evaluated. The =,= symbol[fn::That is, the /comma/ character (ASCII code
  44).] is used for /unquoting/ and the =,@= symbol[fn::That is, the /comma/
  character (ASCII code 44) followed by the /at sign/ (ASCII code 64).] is
  used for /splicing/.

  If an expression is /unquoted/ (e.g ~,expr~ or ~(, expr)~), it will be
  evaluated by =backquote=. If an expression is /spliced/ (e.g ~,@expr~ or ~(,@
  expr)~), it will be evaluated just like when /unquoting/, but instead of
  returning the list itself, the /contents/ of the resulting list will be
  appended to an outer list. Therefore, you can only /splice/ an
  expression if it evaluates to a list, and if the /splice/ call was made
  within another list.

  The =,= and =,@= symbols are bound in the global environment to note that
  they are reserved, but they cannot be used outside of a =backquote=
  argument.

  Again, just like with =quote=, note that ~`expr~ is just syntactic sugar
  for ~(` expr)~, and ~,expr~ is syntactic sugar for ~(, expr)~. They are all
  handled in [[file:parser.c]].

  #+begin_src lisp
  `sym
    ⇒ sym

  ;; For showing how the parser expands them.
  (quote `(a ,b c d))
    ⇒ (` (a (, b) c d))

  (define var 123)

  `(a ,var b c)
    ⇒ (a 123 b c)

  `(a (b ,var) c ,var)
    ⇒ (a (b 123) c 123)

  (define my-list '(1 2 3))

  `(a b ,@my-list c d)
    ⇒ (a b 1 2 3 c d)

  `(a b ,@(list 'X 'Y 'Z) c)
    ⇒ (a b X Y Z c)
  #+end_src

  Since the backquote evaluates each unquoted expression normally, you
  can nest backquotes without any special syntax:

  #+begin_src lisp
  `(hi               ; "hi" quoted by the outer backquote.
    ,(if (< var 30)  ; "if" Evaluated by the outer backquote.
         (+ 100 var) ; "+" evaluated depending on the "if".
         `(abc       ; "abc" quoted by the inner backquote.
           ,var      ; "var" evaluated by the inner backquote.
           xyz))     ; "xyz" quoted by the inner backquote.
    bye)             ; "bye" quoted by the outer backquote.
  #+end_src

  In the previous example, if =var= was ~7~, the backquote would return
  ~(hi 107 bye)~, but if =var= was ~35~, it would return
  ~(hi (abc 35 xyz) bye)~.

  Also note that none of this /unquote/ functionality is available inside
  =quote= arguments, just =backquote=:

  #+begin_src lisp
  '(,a b (c ,d) e)
    ⇒ ((, a) b (c (, d)) e)

  (define var 123)
    ⇒ 123

  (define my-backquote-call '`,var)
    ⇒ (` (, var))

  (eval my-backquote-call)
    ⇒ 123
  #+end_src

- Special Form: define symbol expr :: <<define>>

  Bind symbol to a value in the current environment.

  Evaluates the second argument, and binds it to the first one. Returns
  the evaluated expression.

  #+begin_src lisp
  n
    ⇒ Unbound symbol: `n'.

  (define n 123)
    ⇒ 123

  n
    ⇒ 123
  #+end_src

  As mentioned, it only operates on the /current/ environment.

  #+begin_src lisp
  (define n 123)
    ⇒ 123

  (define f
    (lambda ()
      (define n 999)
      (list "Finished:" n)))

  (f)
    ⇒ ("Finished:" 999)

  n
    ⇒ 123
  #+end_src

  It is a special form because the first argument is not evaluated. This
  way, it doesn't have to be quoted by the caller.

- Special Form: define-global symbol expr :: <<define-global>>

  Bind symbol to a value in the top-most environment. For more
  information, see [[define][=define=]].

  #+begin_src lisp
  (define n 123)
    ⇒ 123

  (define f
    (lambda ()
      (define-global n 999)
      (list "Finished:" n)))

  (f)
    ⇒ ("Finished:" 999)

  n
    ⇒ 999
  #+end_src

- Special Form: lambda formals body... :: <<lambda>>

  Return a new anonymous procedure.

  The =lambda= primitive expects a list of formal arguments (which must be
  symbols) and one or more expressions (of any type) for the body.

  Expressions of type /Lambda/ evaluate to themselves. When calling a
  lambda, each argument is evaluated and bound to its formal symbol, and
  each expression in the body of the function is evaluated in order,
  returning the last one.

  #+begin_src lisp
  (lambda (x)
    (* x 3))
    ⇒ <lambda>

  ((lambda (x) (* x 3)) 5)
    ⇒ 15

  (define f
    (lambda (x)
      (+ x 5)))
    ⇒ <lambda>

  (f 3)
    ⇒ 8
  #+end_src

  A keyword symbol =&rest= followed by a single symbol /S/, can be used in
  the formal argument list to indicate that the caller can provide extra
  non-mandatory arguments, and they will be stored in a *list* bound to
  the symbol /S/ when making the call. If no extra arguments are provided
  when making the call, /S/ is bound to the empty list =nil=.

  #+begin_src lisp
  (define f
    (lambda (a b &rest other)
      (list a b other)))
    ⇒ <lambda>

  (f 1 2 3 4 5)
    ⇒ (1 2 (3 4 5))
  #+end_src

- Special Form: macro formals body... :: <<macro>>

  Return a new anonymous macro.

  The =macro= primitive expects a list of formal arguments (which must be
  symbols) and one or more expressions (of any type) for the body.

  Expressions of type /Macro/ evaluate to themselves. Macros are generally
  similar to lambdas, but there are some key differences:

  - When a macro is called, the arguments are *not* evaluated before
    applying it, so the macro can operate on the un-evaluated
    expressions directly, instead of on the values they compute. The
    first step of a macro call is binding the un-evaluated arguments to
    the formals.
  - Macros don't /directly/ compute values, they instead build Lisp
    expressions that will be used to compute the actual values. The
    second step of a macro call is the /macro expansion/ (see
    [[macroexpand][=macroexpand=]]). In this step, the macro is called just like a
    lambda, returning a Lisp expression.
  - The last step of a macro call is evaluating the expanded expression,
    which will be used to compute the actual value returned by the
    macro.

  In other words the general process when calling a lambda is:

  #+begin_example
  Evaluate arguments -> Bind arguments -> Evaluate body
                        `-----------------------------´
                                   (Apply)
  #+end_example

  While the call process of a macro is:

  #+begin_example
  Bind arguments -> Evaluate body -> Evaluate expansion
  `-----------------------------´
              (Expand)
  #+end_example

  While the process of calling a macro is:

  #+begin_src lisp
  (macro (name) (list 'define name 123))
    ⇒ <macro>

  (define my-macro
    (macro (name) (list 'define name 123)))
    ⇒ <macro>

  (my-macro some-name)
    ⇒ 123

  (macroexpand '(my-macro some-name))
    ⇒ (define some-name 123)

  some-name
    ⇒ 123
  #+end_src

  In the previous example, notice how we don't have to quote =some-name=
  when calling =my-macro=. This is because, since macro arguments are not
  evaluated, the /symbol/ =some-name= is passed to the macro, not the value
  bound to it. The macro is expanded to the list ~(define some-name 123)~,
  and then it's evaluated.

  The special form =backquote= can be really useful in macros. See
  [[backquote][=backquote=]].

  #+begin_src lisp
  ;; Without using backquote
  (defmacro my-macro (x y)
    (list 'if x
          (list 'func (list 'quote 'abc))
          (list '+ '1 '2 y)))

  ;; Using backquote
  (defmacro my-macro (x y)
    `(if ,x
         (func 'abc)
         (+ 1 2 ,y)))
  #+end_src

  Just like lambdas, macros support the use of the =&rest= keyword in the
  formal argument list.

  For more information on how macros behave in this Lisp, see the
  [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Macros.html][Emacs Lisp manual]].

- Special Form: begin &rest exprs :: <<begin>>

  Evaluate each argument in order, and return the last result.

  This primitive is a special form for various reasons. When making a
  normal procedure call, the arguments are not required to be evaluated
  in order, when calling =begin=, they are. The fact that it has to
  evaluate the expressions is helpful when combined with something like
  =apply= and a quoted expression (see [[apply][=apply=]]).

  #+begin_src lisp
  ;; Arguments not evaluated because it's a special form.
  (begin
   (define n 123)
   (+ 1 2))
    ⇒ 3

  n
    ⇒ 123

  ;; Arguments not evaluated because the list is quoted.
  (apply begin
         '((define n 456)
           (+ 1 2)))
    ⇒ 3

  n
    ⇒ 456
  #+end_src

  Furthermore, it could be defined as a macro using =lambda=, with some
  limitations. For example, in the following macro version, calls to
  =define= would bind the variables in the =lambda= environment, which does
  not happen in the special form version.

  #+begin_src lisp
  (defmacro my-begin (&rest exprs)
    `((lambda () ,@exprs)))
    ⇒ <macro>

  (my-begin
   (define my-var 123) ; Only defined in body
   'ignored-sym
   (+ 1 2 3))
    ⇒ 6

  my-var
    ⇒ Unbound symbol: `my-var'.
  #+end_src

- Special Form: if predicate consequent alternative :: <<if>>

  Return evaluated /consequent/ or /alternative/ depending on whether or not
  /predicate/ evaluated to non-nil or not, respectively. See also [[nil][=nil=]]
  and [[tru][=tru=]].

  #+begin_src lisp
  (if tru 'abc 'xyz)
    ⇒ abc

  (if nil 'abc 'xyz)
    ⇒ xyz

  (if (> 5 3)
      (+ 10 20)
      (- 60 50))
    ⇒ 30
  #+end_src

  Note that the /predicate/ is always evaluated, but only the /consequent/
  or the /alternative/ is evaluated afterwards. This is a good example on
  why special forms are necessary, since a normal function call would
  have to evaluate the 3 arguments before applying =if= to them.

- Special Form: or &rest exprs :: <<or>>

  Evaluates each argument expression in order, and once it finds a
  non-nil result, it stops evaluating and returns it. Returns =nil= if all
  of them evaluated to =nil=, or when called with no arguments.

  #+begin_src lisp
  (or (> 1 2) (> 3 4) (> 5 6))
    ⇒ nil

  (or (> 1 2) (> 3 4) 'hello)
    ⇒ hello

  (or)
    ⇒ nil
  #+end_src

  Note that this primitive does not need to be a special form, since it
  can be built with a macro and =if=.

  #+begin_src lisp
  (defmacro my-or (&rest exprs)
    (if (null? exprs)
        nil
        ;; TODO: Don't overwrite "result", generate unique symbol.
        ;; NOTE: We could also use the `let' macro.
        `((lambda (result)
            (if result
                result
                (my-or ,@(cdr exprs))))
          ,(car exprs))))
  #+end_src

- Special Form: and &rest exprs :: <<and>>

  Evaluates each argument expression in order, and if it finds a =nil=
  result, it stops evaluating and returns =nil=. If all arguments
  evaluated to non-nil, returns the last result. Returns =tru= when called
  with no arguments.

  #+begin_src lisp
  (and (> 1 2) (> 3 4) (> 5 6))
    ⇒ nil

  (and (> 4 3) (> 2 1) 'hello)
    ⇒ hello

  (and)
    ⇒ tru
  #+end_src

  Just like with =or=, this primitive does not need to be a special form:

  #+begin_src lisp
  (defmacro my-and (&rest exprs)
    (if (null? exprs)
        tru
        ;; TODO: Don't overwrite "result", generate unique symbol.
        ;; NOTE: We could also use the `let' macro.
        `((lambda (result)
            (if result
                ,(if (null? (cdr exprs))
                     'result
                     `(my-and ,@(cdr exprs)))
                nil))
          ,(car exprs))))
  #+end_src

  If you have trouble understanding the nested backquotes, see
  [[backquote][=backquote=]].

** General Primitives

These primitives don't fit into other categories. They are defined in
[[file:prim_general.c]].

- Function: eval expr :: <<eval>>

  Evaluate the specified expression.

  Different expression types have different evaluation rules:

  1. The empty list (=nil=) evaluates to itself.
  2. Non-empty lists are evaluated as procedure calls.
     - If the (un-evaluated) =car= of the list is a special form symbol
       (see [[*Special Forms]]), it passes the un-evaluated =cdr= to the
       corresponding special form primitive.
     - If the (evaluated) =car= of the list is a macro, the macro is
       called with the un-evaluated =cdr= of the list.
     - Otherwise, the arguments are evaluated and the procedure is
       called. If one argument fails to evaluate, evaluation stops.
  3. Symbols evaluate to their bound values in the current
     environment[fn::See also Section 3.2 of SICP.].
  4. Other expression types (numbers, strings, functions, etc.)
     evaluate to themselves.

  Keep in mind that, since =eval= is a normal procedure, its arguments
  will be evaluated before the actual function call is made, so the user
  might need to use the =quote= special form.

  #+begin_src lisp
  (define var 123)

  ;; We are evaluating 123, which evaluates to itself.
  (eval var)

  ;; We are evaluating the symbol "var", which evaluates to 123.
  (eval (quote var))
  #+end_src

  The C /primitive/ is called =prim_eval=, but the actual evaluation process
  is performed by the C function =eval=, defined in [[file:eval.c]].

- Function: apply function arg-list :: <<apply>>

  Apply a function to a list of arguments.

  The first argument must be an /applicable/ expression, that is, a
  /Primitive/, /Lambda/ or /Macro/; and the second argument must be a list.

  Again, =apply= is a normal procedure, so its arguments will be evaluated
  before the call. However, even thought the user might need to quote
  the argument list, the first argument must be a /procedure/, not a
  /symbol/.

  #+begin_src lisp
  (apply '+ '(1 2 3))
    ⇒ Error: Expected a procedure as the first argument, got 'Symbol'.

  (apply + '(1 2 3))
    ⇒ 6
  #+end_src

  Just like with =eval=, the C /primitive/ is called =prim_apply=, but it's
  just a wrapper for the C function =apply=, defined in [[file:eval.c]]. It
  checks the type of the =function= expression, and dispatches the call to
  the appropriate function for performing the actual application
  process. For more information, see [[lambda][=lambda=]] and [[macro][=macro=]].

- Function: macroexpand quoted-expr :: <<macroexpand>>

  Expand =quoted-expr=, a list representing a macro call. The evaluated
  =car= of the list must be an expression of type /Macro/. The expansion of
  a macro is the expression returned by that macro before being
  evaluated. The /expansion/ step of a macro call is the same as a normal
  lambda call, but the arguments are not evaluated before calling
  it.

  #+begin_src lisp
  (defmacro inc (sym)
    (list 'define sym (list '+ sym 1)))
    ⇒ <macro>

  ;; Alternative, using backquote
  (defmacro inc (sym)
    `(define ,sym (+ ,sym 1)))
    ⇒ <macro>

  (define my-var 5)
    ⇒ 5

  (macroexpand '(inc my-var))
    ⇒ (define my-var (+ my-var 1))
  #+end_src

  Notice how the macro body just returns a list. That is the macro
  expansion. Calling a macro simply means evaluating the expanded
  expression. See also [[macro][=macro=]].

- Function: random limit :: <<random>>

  Return a random number between zero and =limit=. The argument type must
  be numeric, and the returned number will share the same type.

  #+begin_src lisp
  (random 5)
    ⇒ 4

  (random 5.0)
    ⇒ 2.261398

  (type-of (random 1))
    ⇒ Integer

  (type-of (random 1.0))
    ⇒ Float
  #+end_src

- Function: set-random-seed seed :: <<set-random-seed>>

  Set the random seed to the specified integer argument. Returns =tru=.

  #+begin_src lisp
  (set-random-seed 1337)
    ⇒ tru

  (random 1000)
    ⇒ 136

  (set-random-seed 1337)
    ⇒ tru

  (random 1000)
    ⇒ 136
  #+end_src

** Logical primitives

These primitives are used to check for logical truth. They usually
return a /predicate/, that is, an expression whose value is meant to be
interpreted as either /true/ or /false/. In SL, the empty list =nil= is used
to denote /false/, and other values denote /true/ implicitly (see
[[nil][=nil=]]). Usually, these functions return either =nil= or the explicit truth
symbol =tru=.

- Function: equal? a b &rest rest :: <<equal?>>

  Return =tru= if the structure of /all/ arguments is equal, =nil=
  otherwise. In other words, if they are isomorphic. As a rule of thumb,
  two expressions are isomorphic if =write-to-str= returns the same string
  for both of them (see [[write-to-str][=write-to-str=]]). Isomorphism for different types
  will be expanded below.

  The primitive doesn't /require/ arguments of the same type, but the
  equality will usually fail if they don't share a common one.

  Important exceptions:

  - The /symbol/ =nil= and the empty /list/ =()= are interchangeable, and
    therefore equal. This is an exception, and is explained in more
    detail in [[nil][=nil=]].

  Equality for different types:

  - Two non-empty lists are equal if they have the same number of
    elements, and if each expression in the first list is equal to the
    corresponding expression in the second list, according to this
    function =equal?=.
  - Two numbers are equal according to this function if they share the
    same type, and if they have the same value. General numeric equality
    can be checked with [[=][===]].
  - Two strings are equal if they have the same length, and if all of
    their characters match.
  - Symbols are handled just like strings, but comparing the two types
    will always returns =nil=.
  - Two expressions of type /Primitive/ are equal if they point to the
    same C function in memory.
  - Two lambda functions are equal if they have the same number of
    formals, their formals have the same names, and all of the
    expressions in their body match according to this function =equal?=.
  - Macros are handled just like lambdas, but, just like symbols and
    strings, they are not equal according to this function because they
    don't share the same expression type.

  Some examples:

  #+begin_src lisp
  (equal? 123 123)
    ⇒ tru

  (equal? 5 5.0)
    ⇒ nil

  (equal? 'abc "abc")
    ⇒ nil

  (defun foo (x) x)
    ⇒ <lambda>

  (equal? foo (lambda (x) x))
    ⇒ tru

  (equal? foo (lambda (y) y))
    ⇒ nil

  (defmacro bar (x) x)
    ⇒ <macro>

  (equal? foo bar)
    ⇒ nil
  #+end_src

- Function: = a b &rest rest :: <<=>>

  Returns =tru= if the value of /all/ numeric arguments is equal, =nil=
  otherwise. The value of two numeric expressions is equal, according to
  this function, if their values are the same after being converted to a
  /Generic Number Type/. See [[*Generic Number Type][Generic Number Type]].

  Some examples:

  #+begin_src lisp
  (= 1 1)
    ⇒ tru

  (= 1 1.0)
    ⇒ tru

  (= 1 1.0 2)
    ⇒ nil
  #+end_src

- Function: < a b &rest rest :: <<lt>>

  Return =tru= if all arguments are monotonically increasing, that is,
  $a<b<...<n$; =nil= otherwise. Predicates are therefore transitive, that
  is, $a<c$.

  Just like with equality, two expressions will increase or decrease
  depending on their type. These are the different conditions required
  for two expressions to be increasing or decreasing:

  - Two numbers are increasing or decreasing if the value of second is
    greater or smaller than the value of the first,
    respectively. Numbers can be compared if they don't share the same
    type, but will be converted to a Generic Number Type, just like with
    ===.
  - Two strings are increasing or decreasing if the first differing
    character in the strings is greater or smaller on the second string
    than on the first[fn::This is checked using the C function =strcmp=.],
    respectively.
  - Symbols are handled just like strings, but comparing the two types
    will always returns =nil=.
  - Other expression types can't be compared using this function.

  Some examples:

  #+begin_src lisp
  (< 1 2)      ; tru
  (< 10 20 30) ; tru
  (< 10 20 5)  ; nil
  #+end_src

- Function: > a b &rest rest :: <<gt>>

  Return =tru= if all arguments are monotonically decreasing, that is,
  $a>b>...>n$; =nil= otherwise. Predicates are therefore transitive, that
  is, $a>c$. For more information on this function, see [[lt][=<=]].

  Some examples:

  #+begin_src lisp
  (> 2 1)      ; tru
  (> 30 20 10) ; tru
  (> 30 20 40) ; nil
  #+end_src

** Type-checking primitives

These primitives are used for checking the type of an expression. Note
that most of these =type?= functions don't /need/ to be primitives, since we
could check the symbol returned by =type-of=. The primitives in this
section are defined in [[file:prim_type.c]].

See also [[*Types][Types]].

- Function: type-of expr :: <<type-of>>

  Return a symbol representing the type of the specified expression.

  #+begin_src lisp
  (type-of 1)
    ⇒ Integer

  (type-of 1.0)
    ⇒ Float

  (type-of 'foo)
    ⇒ Symbol

  (type-of "Bar")
    ⇒ String

  (type-of '(a b c))
    ⇒ List

  (type-of +)
    ⇒ Primitive

  (type-of (lambda (x) x))
    ⇒ Lambda

  (type-of (macro (x) x))
    ⇒ Macro
  #+end_src

- Function: int? expr :: <<int?>>

  Returns =tru= if the argument is an /Integer/ number, =nil= otherwise.

  #+begin_src lisp
  (int? 1)
    ⇒ tru

  (int? 1.0)
    ⇒ nil
  #+end_src

- Function: flt? expr :: <<flt?>>

  Returns =tru= if the argument is a /Float/ number, =nil= otherwise.

  #+begin_src lisp
  (flt? 1.0)
    ⇒ tru

  (flt? 1)
    ⇒ nil
  #+end_src

- Function: symbol? expr :: <<symbol?>>

  Returns =tru= if the argument is a /Symbol/, =nil= otherwise. Note that,
  even though the symbol =nil= and the empty list =()= are interchangeable,
  only the former is a symbol according to this function. See [[nil][=nil=]].

  #+begin_comment text
  FIXME: Improve previous explanation, check how other Lisps deal with
  it.
  #+end_comment

  #+begin_src lisp
  (define foo 123)
    ⇒ 123

  (symbol? 'foo)
    ⇒ tru

  (symbol? foo) ; 123 is checked
    ⇒ nil

  (symbol? "Bar")
    ⇒ nil

  (symbol? 'nil)
    ⇒ tru

  (symbol? nil) ; NOTE: This might change in the future
    ⇒ nil
  #+end_src

- Function: string? expr :: <<string?>>

  Returns =tru= if the argument is a /String/, =nil= otherwise.

  #+begin_src lisp
  (string? "Foo")
    ⇒ tru

  (string? 'bar)
    ⇒ nil
  #+end_src

- Function: list? expr :: <<list?>>

  Returns =tru= if the argument is a /List/, =nil= otherwise. For more details
  on how the =nil= symbol is handled, see [[symbol?][=symbol?=]].

  #+begin_src lisp
  (list? '(a b c))
    ⇒ tru

  (list? (+ 1 2)) ; 3 is checked
    ⇒ nil

  (list? nil)
    ⇒ tru

  (list? 'nil) ; NOTE: This might change in the future
    ⇒ nil
  #+end_src

- Function: primitive? expr :: <<primitive?>>

  Returns =tru= if the argument is a C /Primitive/, =nil= otherwise.

  #+begin_src lisp
  (primitive? +)
    ⇒ tru

  (defun foo (x) x)
    ⇒ <lambda>

  (primitive? foo)
    ⇒ nil
  #+end_src

- Function: lambda? expr :: <<lambda?>>

  Returns =tru= if the argument is a /Lambda/ function, =nil= otherwise.

  #+begin_src lisp
  (defun foo (x) x)
    ⇒ <lambda>

  (defmacro bar (x) x)
    ⇒ <macro>

  (lambda? foo)
    ⇒ tru

  (lambda? bar)
    ⇒ nil

  (lambda? +)
    ⇒ nil
  #+end_src

- Function: macro? expr :: <<macro?>>

  Returns =tru= if the argument is a /Macro/ function, =nil= otherwise.

  #+begin_src lisp
  (defun foo (x) x)
    ⇒ <lambda>

  (defmacro bar (x) x)
    ⇒ <macro>

  (lambda? foo)
    ⇒ nil

  (lambda? bar)
    ⇒ tru

  (lambda? +)
    ⇒ nil
  #+end_src

** Type conversion primitives

These primitives are used for converting between expression types. The
primitives in this section are defined in [[file:prim_type.c]].

- Function: int->flt expr :: <<int-to-flt>>

  Converts the specified /Integer/ into a /Float/.

  #+begin_src lisp
  (int->flt 1)
    ⇒ 1.000000
  #+end_src

- Function: flt->int expr :: <<flt-to-int>>

  Converts the specified /Float/ into an /Integer/.

  #+begin_src lisp
  (flt->int 1.0)
    ⇒ 1
  #+end_src

- Function: int->str expr :: <<int-to-str>>

  Converts the specified /Integer/ into a /String/. See also [[write-to-str][=write-to-str=]].

  #+begin_src lisp
  (int->str 1)
    ⇒ "1"
  #+end_src

- Function: flt->str expr :: <<flt-to-str>>

  Converts the specified /Float/ into a /String/.

  #+begin_src lisp
  (flt->str 1.0)
    ⇒ "1.000000"
  #+end_src

- Function: str->int expr :: <<str-to-int>>

  Converts the specified /String/ into an /Integer/.

  #+begin_src lisp
  (str->int "1")
    ⇒ 1

  (str->int "1abc")
    ⇒ 1

  (str->int "abc1") ; Invalid input
    ⇒ 0
  #+end_src

- Function: str->flt expr :: <<str-to-flt>>

  Converts the specified /String/ into a /Float/.

  #+begin_src lisp
  (str->flt "1.0")
    ⇒ 1.000000

  (str->flt "1.0abc")
    ⇒ 1.000000

  (str->flt "1")
    ⇒ 1.000000

  (str->flt "1abc")
    ⇒ 1.000000

  (str->flt "abc1") ; Invalid input
    ⇒ 0.000000
  #+end_src

** List-related primitives

These primitives are related to the construction, modification and
information of lists. The primitives in this section are defined in
[[file:prim_list.c]].

- Function: list &rest exprs :: <<list>>

  Construct a list from the specified arguments. All elements remain in
  the top level, even if they are other lists.

  #+begin_src lisp
  (list 1 2 3)
    ⇒ (1 2 3)

  (list 'a '(b c) 'd)
    ⇒ (a (b c) d)

  (list 'a 'b '() nil)
    ⇒ (a b nil nil)
  #+end_src

- Function: cons expr lst :: <<cons>>

  #+begin_comment org
  TODO: If =cons= is updated, update =cons=, =car= and =cdr= sections. Perhaps
  even add a separate section for /cons pairs/.
  #+end_comment

  Prepend =expr= to the beginning of the list =lst=[fn::For more information
  on the history of =cons=, see [[https://www-formal.stanford.edu/jmc/history/lisp/node2.html][John McCarthy (1979) /History of Lisp/]]].

  Note that lists are currently not implemented as multiple =cons= pairs,
  but as a simple linked list instead. I think this is more
  memory-efficient, but this *will probably change* in the
  future. Therefore, the =cons= implementation is a bit different that
  most other Lisps.

  #+begin_src lisp
  (cons 'a '(b c d))
    ⇒ (a b c d)

  (cons '(a b) '(c d))
    ⇒ ((a b) c d)

  (cons 'a nil)
    ⇒ (a)

  (cons 'a 'b) ; NOTE: Not yet implemented
    ⇒ Error: Expected expression of type 'List', got 'Symbol'.
  #+end_src

- Function: car pair :: <<car>>

  Return the first element of the specified /cons pair/[fn::For historical
  reasons, =car= stands for "Contents of the Address (part) of
  Register".]. Therefore, since ~(car (cons a b))~ is always ~a~, the =car= of
  a list is its first element.

  The =car= of =nil= is always =nil=, even though it represents a list with no
  elements.

  #+begin_src lisp
  (car '(a b c))
    ⇒ a

  (car '((a b) c d))
    ⇒ (a b)

  (car nil) ; Special case
    ⇒ nil
  #+end_src

- Function: cdr pair :: <<cdr>>

  Return the second element of the specified /cons pair/[fn::For
  historical reasons, =cdr= stands for "Contents of the Decrement (part)
  of Register".]. Therefore, since ~(cdr (cons a b))~ is always ~b~, the =cdr=
  of a list is the part of the list that follows the first element (the
  =car=).

  The =cdr= of =nil= is always =nil=, even though it represents a list with no
  elements.

  #+begin_src lisp
  (cdr '(a b c))
    ⇒ (b c)

  (cdr '((a b) c d))
    ⇒ (c d)

  (cdr '(a (b c) d))
    ⇒ ((b c) d)

  (cdr nil) ; Special case
    ⇒ nil
  #+end_src

- Function: length sequence :: <<length>>

  Return the number of elements in a sequence, that is, a /List/ or
  /String/.

  #+begin_src lisp
  (length '(a b c))
    ⇒ 3

  (length "abc")
    ⇒ 3

  (length nil)
    ⇒ 0

  (length "")
    ⇒ 0
  #+end_src

- Function: append &rest sequences :: <<append>>

  Attach one sequence to another, that is, a /List/ or /String/. Note that
  all arguments must share the same type, so you can't append a list to
  a string.

  #+begin_src lisp
  (append '(1 2 3) '(a b c) '(4 5 6))
    ⇒ (1 2 3 a b c 4 5 6)

  (append '(a b c))
    ⇒ (a b c)

  (append "foo" "bar")
    ⇒ "foobar"
  #+end_src

  When called with no arguments, =append= returns =nil=.

  #+begin_src lisp
  (append)
    ⇒ nil
  #+end_src

** String primitives

These primitives are related to the construction, modification and
information of strings. The primitives in this section are defined in
[[file:prim_string.c]].

Note that some functions in [[*List-related primitives][List-related primitives]] operate on /sequences/
in general, not just /lists/, so they can be used with strings.

- Function: write-to-str expr :: <<write-to-str>>

  Returns a string that represents the specified expression. The format
  of the returned string must contain enough information to be parsed
  into the original expression using [[read][=read=]].

  #+begin_comment org
  TODO: Add =read-from-str=, add section and replace in here.
  #+end_comment

  See also [[write][=write=]].

  #+begin_src lisp
  (write-to-str 1)
    ⇒ "1"

  (write-to-str 'hello)
    ⇒ "hello"

  (write-to-str (lambda (x) (* x 2)))
    ⇒ "(lambda (x) (* x 2))"

  (write-to-str "Hello, world\n")
    ⇒ "\"Hello, world\\n\""
  #+end_src

  Note that string arguments are escaped by =write-to-str=, but also by
  the REPL itself, so the real output of the function can be seen with
  something like [[print-str][=print-str=]].

  #+begin_src lisp
  (begin
   (print-str (write-to-str "Hello, world\n"))
   (print-str "\n")
   (print-str "\"Hello, world\\n\"") ; Returned
   (print-str "\n")
   'done)
    → "Hello, world\n"
    → "Hello, world\n"
    ⇒ done
  #+end_src

- Function: format format-string &rest exprs :: <<format>>

  Returns a string with the specified format. This function is similar
  to C's =sprintf(3)=.

  The =format= function produces a string from the =format-string=, copying
  all characters literally, except the percent sign =%=, which is used to
  indicate the start of a /format specifier/. Format specifiers are used
  to indicate how its corresponding expression (obtained from the =exprs=
  list) should be converted and appended to the final string.

  This function expects the number of =exprs= to match the format
  specifiers in the =format-string=; the function will fail if the user
  didn't supply enough arguments, but /will not/ check if the user
  supplied more. Furthermore, the function will make sure that each
  supplied argument matches the type required by the format specifier.

  These are the currently supported format specifiers:

  - =s= :: Format a expression of type /String/. Each character is printed
    literally, nothing is escaped, similar to =print-str=.
  - =d= :: Format a expression of type /Integer/.
  - =f= :: Format a expression of type /Float/.
  - =%= :: Used to represent the literal percent sign =%=. This format
    specifier does not need a matching expression in the =exprs= list.

  The function will fail if the user supplied an unknown format
  specifier.

  #+begin_src lisp
  (format "%s, %s!" "Hello" "world")
    ⇒ "Hello, world!"

  (format "%d / %d = %d (%f)" 5 2 (quotient 5 2) (/ 5 2))
    ⇒ "5 / 2 = 2 (2.500000)"
  #+end_src

- Function: substring string &optional from to :: <<substring>>

  Return a new string whose contents are a substring of
  =string=. Paraphrasing the Emacs Lisp manual:

  #+begin_quote
  The returned string consists of the characters between index =from=
  (inclusive) and index =to= (exclusive) of =string=. The =from= and =to=
  arguments are zero-indexed: 0 means the first character of =string=.

  Negative values are counted from the end of =string=, so -1 represents
  the last character in the string.

  If =from= is nil, the substring starts at index 0; and if =to= is nil, the
  substring runs to the end of =string=.
  #+end_quote

  Some examples:

  #+begin_src lisp
  (substring "abcdef")
    ⇒ "abcdef"

  (substring "abcdef" 0 2)
    ⇒ "ab"

  (substring "abcdef" 1 nil)
    ⇒ "bcdef"

  (substring "abcdef" -1 nil)
    ⇒ "f"

  (substring "abcdef" 1 -1)
    ⇒ "bcde"

  (substring "abcdef" -3 -1)
    ⇒ "de"
  #+end_src

- Function: re-match-groups regexp string &optional ignore-case :: <<re-match-groups>>

  Try to match every group in =regexp= against =string=, and return a list
  with the matches. The first match in the returned list corresponds to
  the whole =regexp=, and the remaining elements correspond to each
  parenthesized group, if any. If the =regexp= didn't match =string=, the
  function returns =nil=.

  Each /match/ in the returned list is a list with the form ~(START END)~,
  where =START= and =END= are integers that indicate the /start/ and /end/ index
  of the match inside =string=, respectively.

  #+begin_comment org
  TODO: After implementing proper =cons=, return a list of =(START . END)=
  pairs, not a list of two-element lists.
  #+end_comment

  By default, the search is case-sensitive, but this can be overwritten
  by specifying a non-nil argument for the optional parameter
  =ignore-case=[fn::When non-nil, the C function =regcomp= is called with
  the =REG_ICASE= flag. For more information, see [[https://pubs.opengroup.org/onlinepubs/009695399/functions/regcomp.html][the manual page for
  =regcomp=]].].

  The function uses POSIX regular expression syntax, more specifically
  /Extended Regular Expression/ (ERE) syntax[fn::For more information, see
  IEEE Std 1003.1, Section 9, [[https://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap09.html][/Regular Expressions/]]; and the =sed= manual,
  [[https://www.gnu.org/software/sed/manual/html_node/ERE-syntax.html][/Overview of extended regular expression syntax/]] as well as [[https://www.gnu.org/software/sed/manual/html_node/Character-Classes-and-Bracket-Expressions.html][/Character
  Classes and Bracket Expressions/]].].

  Some examples:

  #+begin_src lisp
  (define str "abc XYZ 123")

  (re-match-groups "abc" str)
    ⇒ ((0 3))

  (re-match-groups "xyz" str)
    ⇒ nil

  (re-match-groups "xyz" str tru)
    ⇒ ((4 7))

  (re-match-groups "^(abc) ([A-Z]+) ([[:digit:]]+)$" str)
    ⇒ ((0 11) (0 3) (4 7) (8 11))
  #+end_src

  Note that this function only returns information about the /first match/
  of =regexp= in =string=, not about all the possible matches:

  #+begin_src lisp
  ;; Not ((0 1) (1 2) (2 3))
  (re-match-groups "a" "aaa")
    ⇒ ((0 1))
  #+end_src

  Also note that, since any non-nil argument can be used for the
  =ignore-case= parameter, sometimes it might be a good idea to use a more
  descriptive value:

  #+begin_src lisp
  (re-match-groups "abc" "ABC" 'ignore-case)
    ⇒ ((0 3))
  #+end_src

** Arithmetic primitives

These primitives are used for performing arithmetical operations on
numbers. The primitives in this section are defined in
[[file:prim_arith.c]]. See also [[*Bit-wise primitives][Bit-wise primitives]].

- Function: + &rest numbers :: <<+>>

  Add the specified numbers. If the arguments don't share a common type,
  they are converted to a common type (see [[*Generic Number Type][Generic Number Type]]). Returns
  0 when called with no arguments.

  #+begin_src lisp
  (+)
    ⇒ 0

  (+ 1 2 3)
    ⇒ 6

  (+ 1 2.0 3)
    ⇒ 6.000000
  #+end_src

- Function: - &rest numbers :: <<->>

  Subtract the specified numbers in order. If the arguments don't share
  a common type, they are converted to a common type (see [[*Generic Number Type][Generic Number
  Type]]). When called with just one argument, it's negated. Returns 0
  when called with no arguments.

  #+begin_src lisp
  (-)
    ⇒ 0

  (- 5)
    ⇒ -5

  (- 5 2 1)
    ⇒ 2

  (- 5 2.0 1)
    ⇒ 2.000000
  #+end_src

- Function: * &rest numbers :: <<*>>

  Multiply the specified numbers. If the arguments don't share a common
  type, they are converted to a [[*Generic Number Type][Generic Number Type]]. Returns 1 when
  called with no arguments.

  #+begin_src lisp
  (*)
    ⇒ 1

  (* 1 2 3)
    ⇒ 6

  (* 1 2.0 3)
    ⇒ 6.000000
  #+end_src

- Function: / dividend &rest divisors :: <</>>

  Divide the =dividend= by each divisor in order. The arguments are /always/
  converted to a common type, even if the arguments share a common type
  (see [[*Generic Number Type][Generic Number Type]]). For integer division, see
  [[quotient][=quotient=]]. Trying to divide by zero results in an error.

  #+begin_src lisp
  (/ 10)
    ⇒ 10.000000

  (/ 10 2)
    ⇒ 5.000000

  (/ 10 0)
    ⇒ Error: Trying to divide by zero.

  (/ 10 3)
    ⇒ 3.333333

  (/ 10 2 2)
    ⇒ 2.500000
  #+end_src

- Function: mod dividend &rest divisors :: <<mod>>

  Return the modulus of =dividend= by each divisor in order. Just like =/=,
  this function converts all arguments to a common type before operating
  on them (see [[*Generic Number Type][Generic Number Type]]). This function allows floating-point
  and negative inputs[fn::For more details on a possible implementation
  of a floating-point =mod=, see [[https://8dcc.github.io/programming/fmod.html][the article on my blog]].]. Trying to
  divide by zero results in an error.

  Similarly to how the Emacs Lisp manual describes =mod=, the following
  expression should be equal to the =dividend=:

  #+begin_src lisp
  (+ (mod dividend divisor)
     (* (floor (/ dividend divisor)) divisor))
  #+end_src

  Note that, although the behavior of the =mod= function is the same in SL
  and in Emacs Lisp, the behavior of the =floor= and =/= functions is
  not. See [[floor][=floor=]].

  Some examples of =mod=:

  #+begin_src lisp
  (mod 10)
    ⇒ 10.000000

  (mod 10 2)
    ⇒ 0.000000

  (mod 10 3)
    ⇒ 1.000000
  #+end_src

- Function: quotient dividend &rest divisors :: <<quotient>>

  Divide the =dividend= by each divisor in order. Unlike =/=, this function
  /only/ operates with integers. Trying to divide by zero results in an
  error.

  #+begin_src lisp
  (quotient 10)
    ⇒ 10

  (quotient 10 2)
    ⇒ 5

  (quotient 10 0)
    ⇒ Error: Trying to divide by zero.

  (quotient 10 3)
    ⇒ 3
  #+end_src

  The behavior is identical to integer division in C, that is, the
  result is always truncated towards zero; in other words, rounded
  towards the smallest absolute value. Dividing using =quotient= is /not/
  the same as using =floor= on a floating point =/= division:

  #+begin_src lisp
  (floor (/ -5 2))
    ⇒ -3.000000

  (quotient -5 2)
    ⇒ -2
  #+end_src

- Function: remainder dividend &rest divisors :: <<remainder>>

  Return the remainder of =dividend= by each divisor in order. Unlike =mod=,
  this function /only/ operates with integers. Trying to divide by zero
  results in an error.

  The =remainder= function in SL works like the =remainder= function in
  Scheme. The following expression should be equal to the =dividend=:

  #+begin_src lisp
  (+ (remainder dividend divisor)
     (* (quotient dividend divisor) divisor))
  #+end_src

  Again, note the difference between ~(floor (/ ...))~ and
  ~(quotient ...)~. See [[quotient][=quotient=]] and [[floor][=floor=]].

  Some examples of =remainder=:

  #+begin_src lisp
  (remainder 10)
  ⇒ 10

  (remainder 10 2)
  ⇒ 0

  (remainder 10 3)
  ⇒ 1
  #+end_src

  The behavior of this function is identical to the =%= operator in
  C. Note that, in SL, the /remainder/ and the /modulo/ of two numbers is
  not the same:

  #+begin_src lisp
  (remainder -5 2)
    ⇒ -1

  (mod -5 2)
    ⇒ 1.000000
  #+end_src

- Function: round number :: <<round>>

  Round =number= to nearest integer. Halfway cases are rounded /away/ from
  zero. The type of the returned value always matches the type of the
  input.

  #+begin_src lisp
  (round 5)
    ⇒ 5

  (round 5.3)
    ⇒ 5.000000

  (round 5.5)
    ⇒ 6.000000

  (round 5.6)
    ⇒ 6.000000

  (round -5.3)
    ⇒ -5.000000

  (round -5.5)
    ⇒ -6.000000

  (round -5.6)
    ⇒ -6.000000
  #+end_src

- Function: floor number :: <<floor>>

  Return the largest integral value not greater than =number=. In other
  words, round the specified =number= towards negative infinity. The type
  of the returned value always matches the type of the input.

  #+begin_src lisp
  (floor 5)
    ⇒ 5

  (floor 5.0)
    ⇒ 5.000000

  (floor 5.7)
    ⇒ 5.000000

  (floor -5.0)
    ⇒ -5.000000

  (floor -5.7)
    ⇒ -6.000000
  #+end_src

  Note how =floor= does /not/ round towards zero for negative values. See also [[truncate][=truncate=]].

- Function: ceiling number :: <<ceiling>>

  Return the smallest integral value not less than =number=. In other
  words, round the specified =number= towards positive infinity. The type
  of the returned value always matches the type of the input.

  #+begin_src lisp
  (ceiling 5)
    ⇒ 5

  (ceiling 5.0)
    ⇒ 5.000000

  (ceiling 5.3)
    ⇒ 6.000000

  (ceiling -5.0)
    ⇒ -5.000000

  (ceiling -5.3)
    ⇒ -5.000000
  #+end_src

- Function: truncate number :: <<truncate>>

  Round the specified =number= to an integer, towards zero. In other
  words, return the =number= with the fractional part set to zero. The
  type of the returned value always matches the type of the input.

  #+begin_src lisp
  (truncate 5)
    ⇒ 5

  (truncate 5.3)
    ⇒ 5.000000

  (truncate 5.6)
    ⇒ 5.000000

  (truncate -5.3)
    ⇒ -5.000000

  (truncate -5.6)
    ⇒ -5.000000
  #+end_src

** Bit-wise primitives

These primitives are related to the manipulation of bits. The primitives
in this section are defined in [[file:prim_bitwise.c]].

- Function: bit-and integer &rest rest :: <<bit-and>>

  Perform a bit-wise /and/ operation with each integer argument. That is,
  each bit in the result is set if that bit was set in all of the
  arguments.

  #+begin_example
  0b11110000  0xF0  240
  0b11001100  0xCC  204
  ----------  ----  --- (AND)
  0b11000000  0xC0  192
  #+end_example

  Some examples:

  #+begin_src lisp
  (bit-and 0xF0 0xCC)
    ⇒ 192

  (bit-and 0xF0 0xCC 0x03)
    ⇒ 0
  #+end_src

- Function: bit-or integer &rest rest :: <<bit-or>>

  Perform a bit-wise /or/ operation with each integer argument. That is,
  each bit in the result is set if that bit was set in at least one of
  the arguments.

  #+begin_example
  0b11110000  0xF0  240
  0b11001100  0xCC  204
  ----------  ----  --- (OR)
  0b11111100  0xFC  252
  #+end_example

  Some examples:

  #+begin_src lisp
  (bit-or 0xF0 0xCC)
    ⇒ 252

  (bit-or 0xF0 0xCC 0x03)
    ⇒ 255
  #+end_src

- Function: bit-xor integer &rest rest :: <<bit-xor>>

  Perform a bit-wise /xor/ operation with each integer argument. That is,
  each bit in the result is set if that bit was set in an odd number of
  arguments.

  #+begin_example
  0b11110000  0xF0  240
  0b11001100  0xCC  204
  ----------  ----  --- (XOR)
  0b00111100  0x3C   60
  #+end_example

  Some examples:

  #+begin_src lisp
  (bit-xor 0xF0 0xCC)
    ⇒ 60

  (bit-xor 0xF0 0xCC 0x03)
    ⇒ 63
  #+end_src

- Function: bit-not integer :: <<bit-not>>

  Perform a bit-wise /not/ operation on =integer=. That is, if a bit was set
  (1) in the input, it becomes unset; and if the bit was unset (0), it
  becomes set.

  #+begin_example
  0b11001100  0xCC  204
  ----------  ----  --- (NOT)
  0b00110011  0x33   51
  #+end_example

  Some examples:

  #+begin_src lisp
  (bit-not 0xCC)
    ⇒ -205 ; Shown as signed

  (format "%x" (bit-not 0xCC))
    ⇒ "0xffffffffffffff33"

  (bit-not 0)
    ⇒ -1

  (format "%x" (bit-not 0))
    ⇒ "0xffffffffffffffff"
  #+end_src

- Function: shr integer n-bits :: <<shr>>

  Shift the specified =integer= /n/ bits to the right. Sets the high-order
  bits to zero. It is equivalent to the ~>>~ C operator, and to the =shr=
  ~x86~ assembly instruction[fn::It is /not/ equivalent to the =ror=
  instruction.].

  Some examples:

  #+begin_src lisp
  (shr 0xF0 4)
    ⇒ 15

  (format "%x" (shr 0xF0 4))
    ⇒ "0xf"

  (shr 0xF0 6)
    ⇒ 3

  (format "%x" (shr 0xF0 6))
    ⇒ "0x3"
  #+end_src

- Function: shl integer n-bits :: <<shl>>

  Shift the specified =integer= /n/ bits to the left. Sets the low-order
  bits to zero. It is equivalent to the ~<<~ C operator, and to the =shl=
  ~x86~ assembly instruction[fn::It is /not/ equivalent to the =rol=
  instruction.].

  Some examples:

  #+begin_src lisp
  (shl 0x0F 4)
    ⇒ 240

  (format "%x" (shl 0x0F 4))
    ⇒ "0xf0"

  (shl 0x0F 6)
    ⇒ 960

  (format "%x" (shl 0x0F 6))
    ⇒ "0x3c0"
  #+end_src

** Input/Output primitives

TODO

- Function: read :: <<read>>

  Read a single expression from =stdin=, parse it, and return it as a Lisp
  expression.

  #+begin_src lisp
  (read)
    ;; Input: foo bar
    ⇒ foo

  (type-of (read))
    ;; Input: foo
    ⇒ Symbol

  (read)
    ;; Input: "Hello\nWorld\n"
    ⇒ "Hello\nWorld\n"

  (print-str (read))
    ;; Input: "Hello\nWorld\n"
    → Hello
    → World

  (eval (read))
    ;; Input: (+ 1 2)
    ⇒ 3
  #+end_src

- Function: write expr :: <<write>>

  TODO

  For more information, see [[write-to-str][=write-to-str=]].

- Function: scan-str :: <<scan-str>>

  TODO

- Function: print-str string :: <<print-str>>

  TODO

- Function: error string :: <<error>>

  TODO

* Standard library

TODO

** Debugging

TODO

- Function: trace function :: <<trace>>

  TODO
